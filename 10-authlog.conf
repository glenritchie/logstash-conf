
filter {
if [type] == "auth" {

	grok {
	 match => { "message" => "%{SYSLOGLINE}"}
	}

	date {
	 match => [ "timestamp" , "MMM  d HH:mm:ss" ]
	}
	grok {
	  match => { "message[1]" => "Connection closed by %{IP:src_ip}" }
	  add_tag => [ "ssh_connection_closed" ]
	  tag_on_failure => []
	}
	grok {
	  match => { "message[1]" => "Received disconnect from %{IP:src_ip}" }
	  add_tag => [ "ssh_connection_disconnect" ]
	  tag_on_failure => []
	}


	grok {
	  match => { "message[1]" => "Failed password for invalid user %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2" }
	  add_tag => [ "ssh_brute_force_attack" ]
	  tag_on_failure => []
	}
	grok {
	  match => { "message[1]" => "Did not receive identification string from %{IP:src_ip}" }
	  add_tag => [ "ssh_no_id" ]
	  tag_on_failure => []
	}

	grok {
	  match => { "message[1]" => "User %{USERNAME:username} from %{IP:src_ip} not allowed because not listed in AllowUsers" }
	  add_tag => [ "ssh_user_not_allowed" ]
	  tag_on_failure => []
	}

	grok {
	  match => { "message[1]" => "authentication failure; logname=%{USERNAME:logname} uid=%{BASE10NUM:uid} euid=%{BASE10NUM:euid} tty=%{TTY:tty} ruser=%{USERNAME:ruser} rhost=(?:%{HOSTNAME:remote_host}|\s*) user=%{USERNAME:user}"}
	  add_tag => [ "sudo_auth_failure" ]
	  tag_on_failure => []
	}
	grok {
	  match => { "message[1]" => "Failed password for %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2"}
	  add_tag => [ "ssh_failed_password_login" ]
	  tag_on_failure => []
	}
	
	grok {
	  match => { "message[1]" => "Accepted password for %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2"}
	  add_tag => [ "ssh_sucessful_password_login" ]
	  tag_on_failure => []
	}
	
	grok {
	  match => { "message[1]" => "Accepted publickey for %{USERNAME:username} from %{IP:src_ip} port %{BASE10NUM:port} ssh2"}
	  add_tag => [ "ssh_sucessful_publickey_login" ]
	  tag_on_failure => []
	}

        if [src_ip]  {
                geoip {
                        source => "src_ip"
                        target => "geoip"
                        database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
                        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
                        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
                }
                mutate {
                        convert => [ "[geoip][coordinates]", "float" ]
                }
        }
  }


}


